/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/assets/{id}": {
    /** Image typed files can be dynamically resized and transformed to fit any need. */
    get: operations["getAsset"];
  };
  "/auth/login": {
    /** Retrieve a Temporary Access Token */
    post: operations["login"];
  };
  "/auth/refresh": {
    /** Refresh a Temporary Access Token. */
    post: operations["refresh"];
  };
  "/auth/logout": {
    /** Log Out */
    post: operations["logout"];
  };
  "/auth/password/request": {
    /** Request a reset password email to be send. */
    post: operations["passwordRequest"];
  };
  "/auth/password/reset": {
    /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
    post: operations["passwordReset"];
  };
  "/auth/oauth": {
    /** List configured OAuth providers. */
    get: operations["oauth"];
  };
  "/auth/oauth/{provider}": {
    /** Start OAuth flow using the specified provider */
    get: operations["oauthProvider"];
  };
  "/extensions/interfaces": {
    /** List all installed custom interfaces. */
    get: operations["getInterfaces"];
  };
  "/extensions/layouts": {
    /** List all installed custom layouts. */
    get: operations["getLayouts"];
  };
  "/extensions/displays": {
    /** List all installed custom displays. */
    get: operations["getDisplays"];
  };
  "/extensions/modules": {
    /** List all installed custom modules. */
    get: operations["getModules"];
  };
  "/server/info": {
    /** Perform a system status check and return the options. */
    get: operations["serverInfo"];
  };
  "/server/ping": {
    /** Ping, pong. Ping.. pong. */
    get: operations["ping"];
  };
  "/utils/hash/generate": {
    /** Generate a hash for a given string. */
    post: operations["hash-generate"];
  };
  "/utils/hash/verify": {
    /** Generate a hash for a given string. */
    post: operations["hash-verify"];
  };
  "/utils/sort/{collection}": {
    /** Re-sort items in collection based on start and to value of item */
    post: operations["sort"];
  };
  "/utils/import/{collection}": {
    /** Import multiple records from a JSON or CSV file into a collection. */
    post: operations["import"];
  };
  "/utils/export/{collection}": {
    /** Export a larger data set to a file in the File Library */
    post: operations["export"];
  };
  "/utils/cache/clear": {
    /** Resets both the data and schema cache of Directus. */
    post: operations["clear-cache"];
  };
  "/utils/random/string": {
    /** Returns a random string of given length. */
    get: operations["random"];
  };
  "/items/articles": {
    /** List the articles items. */
    get: operations["readItemsArticles"];
  };
  "/items/articles/{id}": {
    /** Retrieve a single articles item by unique identifier. */
    get: operations["readSingleItemsArticles"];
  };
  "/items/home": {
    /** List the home items. */
    get: operations["readItemsHome"];
  };
  "/items/home/{id}": {
    /** Retrieve a single home item by unique identifier. */
    get: operations["readSingleItemsHome"];
  };
  "/items/projects": {
    /** List the projects items. */
    get: operations["readItemsProjects"];
  };
  "/items/projects/{id}": {
    /** Retrieve a single projects item by unique identifier. */
    get: operations["readSingleItemsProjects"];
  };
  "/activity": {
    /** Returns a list of activity actions. */
    get: operations["getActivities"];
  };
  "/activity/comment": {
    /** Creates a new comment. */
    post: operations["createComment"];
  };
  "/activity/{id}": {
    /** Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information. */
    get: operations["getActivity"];
  };
  "/activity/comment/{id}": {};
  "/collections": {
    /** Returns a list of the collections available in the project. */
    get: operations["getCollections"];
  };
  "/collections/{id}": {
    /** Retrieves the details of a single collection. */
    get: operations["getCollection"];
  };
  "/fields": {
    /** Returns a list of the fields available in the project. */
    get: operations["getFields"];
  };
  "/fields/{collection}": {
    /** Returns a list of the fields available in the given collection. */
    get: operations["getCollectionFields"];
  };
  "/fields/{collection}/{id}": {
    /** Retrieves the details of a single field in a given collection. */
    get: operations["getCollectionField"];
  };
  "/files": {
    /** List the files. */
    get: operations["getFiles"];
    /** Create a new file */
    post: operations["createFile"];
  };
  "/files/{id}": {
    /** Retrieve a single file by unique identifier. */
    get: operations["getFile"];
    /** Delete an existing file. */
    delete: operations["deleteFile"];
    /** Update an existing file, and/or replace it's file contents. */
    patch: operations["updateFile"];
  };
  "/folders": {
    /** List the folders. */
    get: operations["getFolders"];
    /** Create a new folder. */
    post: operations["createFolder"];
  };
  "/folders/{id}": {
    /** Retrieve a single folder by unique identifier. */
    get: operations["getFolder"];
    /** Delete an existing folder */
    delete: operations["deleteFolder"];
    /** Update an existing folder */
    patch: operations["updateFolder"];
  };
  "/permissions": {
    /** List all permissions. */
    get: operations["getPermissions"];
  };
  "/permissions/me": {
    /** List the permissions that apply to the current user. */
    get: operations["getMyPermissions"];
  };
  "/permissions/{id}": {
    /** Retrieve a single permissions object by unique identifier. */
    get: operations["getPermission"];
  };
  "/presets": {
    /** List the presets. */
    get: operations["getPresets"];
    /** Create a new preset. */
    post: operations["createPreset"];
  };
  "/presets/{id}": {
    /** Retrieve a single preset by unique identifier. */
    get: operations["getPreset"];
    /** Delete an existing preset. */
    delete: operations["deletePreset"];
    /** Update an existing preset. */
    patch: operations["updatePreset"];
  };
  "/relations": {
    /** List the relations. */
    get: operations["getRelations"];
  };
  "/relations/{id}": {
    /** Retrieve a single relation by unique identifier. */
    get: operations["getRelation"];
  };
  "/roles": {
    /** List the roles. */
    get: operations["getRoles"];
  };
  "/roles/{id}": {
    /** Retrieve a single role by unique identifier. */
    get: operations["getRole"];
  };
  "/settings": {
    /** List the settings. */
    get: operations["getSettings"];
  };
  "/users": {
    /** List the users. */
    get: operations["getUsers"];
  };
  "/users/{id}": {
    /** Retrieve a single user by unique identifier. */
    get: operations["getUser"];
    /** Update an existing user */
    patch: operations["updateUser"];
  };
  "/users/invite": {};
  "/users/invite/accept": {};
  "/users/me": {
    /** Retrieve the currently authenticated user. */
    get: operations["getMe"];
    /** Update the currently authenticated user. */
    patch: operations["updateMe"];
  };
  "/users/me/track/page": {
    /** Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used. */
    patch: operations["updateLastUsedPageMe"];
  };
  "/users/me/tfa/enable": {};
  "/users/me/tfa/disable": {};
  "/flows": {
    /** Get all flows. */
    get: operations["getFlows"];
  };
  "/flows/{id}": {
    /** Retrieve a single flow by unique identifier. */
    get: operations["getFlow"];
  };
};

export type components = {
  schemas: {
    ItemsArticles: {
      image?: (string | components["schemas"]["Files"]) | null;
      /** Format: uuid */
      id?: string;
      status?: string;
      sort?: number | null;
      /** Format: timestamp */
      date_created?: string | null;
      /** Format: timestamp */
      date_updated?: string | null;
      title?: string | null;
      slug?: string | null;
      tags?: unknown | null;
      content?: string | null;
    };
    ItemsHome: {
      avatar?: (string | components["schemas"]["Files"]) | null;
      id?: number;
    };
    ItemsProjects: {
      image?: (string | components["schemas"]["Files"]) | null;
      /** Format: uuid */
      id?: string;
      status?: string;
      sort?: number | null;
      /** Format: timestamp */
      date_created?: string | null;
      name?: string | null;
      url?: string | null;
      keywords?: unknown | null;
    };
    Activity: {
      /**
       * @description Unique identifier for the object.
       * @example 2
       */
      id?: number;
      /**
       * @description Action that was performed.
       * @example update
       * @enum {string}
       */
      action?: "create" | "update" | "delete" | "login";
      /** @description The user who performed this action. */
      user?: (string | components["schemas"]["Users"]) | null;
      /**
       * Format: date-time
       * @description When the action happened.
       * @example 2019-12-05T22:52:09Z
       */
      timestamp?: string;
      /**
       * @description The IP address of the user at the time the action took place.
       * @example 127.0.0.1
       */
      ip?: string;
      /**
       * @description User agent string of the browser the user used when the action took place.
       * @example Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36
       */
      user_agent?: string;
      /** @description Collection identifier in which the item resides. */
      collection?: string | components["schemas"]["Collections"];
      /**
       * @description Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
       * @example 328
       */
      item?: string;
      /**
       * @description User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
       * @example null
       */
      comment?: string | null;
      revisions?: string;
    };
    Collections: {
      group?: (string | components["schemas"]["Collections"]) | null;
      /**
       * @description The collection key.
       * @example customers
       */
      collection?: string;
      icon?: string | null;
      note?: string | null;
      display_template?: string | null;
      hidden?: boolean;
      singleton?: boolean;
      translations?: unknown | null;
      archive_field?: string | null;
      archive_app_filter?: boolean;
      archive_value?: string | null;
      unarchive_value?: string | null;
      sort_field?: string | null;
      accountability?: string | null;
      color?: string | null;
      item_duplication_fields?: unknown | null;
      sort?: number | null;
      collapse?: string;
      collection_divider?: string;
      archive_divider?: string;
      sort_divider?: string;
      accountability_divider?: string;
      duplication_divider?: string;
    };
    Fields: {
      id?: number;
      /**
       * @description Unique name of the collection this field is in.
       * @example about_us
       */
      collection?: string;
      /**
       * @description Unique name of the field. Field name is unique within the collection.
       * @example id
       */
      field?: string;
      special?: string[] | null;
      interface?: string | null;
      options?: unknown | null;
      display?: string | null;
      display_options?: unknown | null;
      readonly?: boolean;
      hidden?: boolean;
      sort?: number | null;
      width?: string | null;
      translations?: unknown | null;
      note?: string | null;
      conditions?: unknown | null;
      required?: boolean | null;
      group?: (number | components["schemas"]["Fields"]) | null;
      validation?: unknown | null;
      validation_message?: string | null;
    };
    Files: {
      /**
       * @description Virtual folder where this file resides in.
       * @example null
       */
      folder?: (string | components["schemas"]["Folders"]) | null;
      modified_by?: (string | components["schemas"]["Users"]) | null;
      /**
       * @description Who uploaded the file.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      uploaded_by?: string | components["schemas"]["Users"];
      /**
       * @description Unique identifier for the file.
       * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
       */
      id?: string;
      /**
       * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
       * @example local
       */
      storage?: string;
      /**
       * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
       * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
       */
      filename_disk?: string;
      /**
       * @description How you want to the file to be named when it's being downloaded.
       * @example avatar.jpg
       */
      filename_download?: string;
      /**
       * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
       * @example User Avatar
       */
      title?: string;
      /**
       * @description MIME type of the file.
       * @example image/jpeg
       */
      type?: string;
      /**
       * Format: date-time
       * @description When the file was uploaded.
       * @example 2019-12-03T00:10:15+00:00
       */
      uploaded_on?: string;
      /** Format: timestamp */
      modified_on?: string;
      /**
       * @description Character set of the file.
       * @example binary
       */
      charset?: string | null;
      /**
       * @description Size of the file in bytes.
       * @example 137862
       */
      filesize?: number;
      /**
       * @description Width of the file in pixels. Only applies to images.
       * @example 800
       */
      width?: number | null;
      /**
       * @description Height of the file in pixels. Only applies to images.
       * @example 838
       */
      height?: number | null;
      /**
       * @description Duration of the file in seconds. Only applies to audio and video.
       * @example 0
       */
      duration?: number | null;
      /**
       * @description Where the file was embedded from.
       * @example null
       */
      embed?: string | null;
      /** @description Description for the file. */
      description?: string | null;
      /** @description Where the file was created. Is automatically populated based on EXIF data for images. */
      location?: string | null;
      /** @description Tags for the file. Is automatically populated based on EXIF data for images. */
      tags?: string[] | null;
      /** @description IPTC, EXIF, and ICC metadata extracted from file */
      metadata?: { [key: string]: unknown } | null;
      storage_divider?: string;
    };
    Folders: {
      /**
       * @description Unique identifier of the parent folder. This allows for nested folders.
       * @example null
       */
      parent?: (string | components["schemas"]["Folders"]) | null;
      /**
       * @description Unique identifier for the folder.
       * @example 0cf0e03d-4364-45df-b77b-ca61f61869d2
       */
      id?: string;
      /**
       * @description Name of the folder.
       * @example New York
       */
      name?: string;
    };
    Permissions: {
      /**
       * @description Unique identifier of the role this permission applies to.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      role?: string | null;
      /**
       * @description Unique identifier for the permission.
       * @example 1
       */
      id?: number;
      /**
       * @description What collection this permission applies to.
       * @example customers
       */
      collection?: string;
      /**
       * @description What action this permission applies to.
       * @example create
       * @enum {string}
       */
      action?: "create" | "read" | "update" | "delete";
      /** @description JSON structure containing the permissions checks for this permission. */
      permissions?: { [key: string]: unknown } | null;
      /** @description JSON structure containing the validation checks for this permission. */
      validation?: { [key: string]: unknown } | null;
      /** @description JSON structure containing the preset value for created/updated items. */
      presets?: { [key: string]: unknown } | null;
      /** @description CSV of fields that the user is allowed to interact with. */
      fields?: string[] | null;
    };
    Presets: {
      /**
       * @description The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.
       * @example 50419801-0f30-8644-2b3c-9bc2d980d0a0
       */
      role?: (string | components["schemas"]["Roles"]) | null;
      /**
       * @description The unique identifier of the user to whom this collection preset applies.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      user?: (string | components["schemas"]["Users"]) | null;
      /**
       * @description Unique identifier for this single collection preset.
       * @example 155
       */
      id?: number;
      /** @description Name for the bookmark. If this is set, the preset will be considered a bookmark. */
      bookmark?: string | null;
      /**
       * @description What collection this collection preset is used for.
       * @example articles
       */
      collection?: string | components["schemas"]["Collections"];
      /** @description Search query. */
      search?: string | null;
      /**
       * @description Key of the layout that is used.
       * @example null
       */
      layout?: string;
      /**
       * @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
       * @example {
       *   "cards": {
       *     "sort": "-published_on"
       *   }
       * }
       */
      layout_query?: unknown | null;
      /**
       * @description Options of the views. The properties in here are controlled by the layout.
       * @example {
       *   "cards": {
       *     "icon": "account_circle",
       *     "title": "{{ first_name }} {{ last_name }}",
       *     "subtitle": "{{ title }}",
       *     "size": 3
       *   }
       * }
       */
      layout_options?: unknown | null;
      refresh_interval?: number | null;
      filter?: unknown | null;
      icon?: string;
      color?: string | null;
    };
    Relations: {
      /**
       * @description Unique identifier for the relation.
       * @example 1
       */
      id?: number;
      /**
       * @description Collection that has the field that holds the foreign key.
       * @example directus_activity
       */
      many_collection?: string;
      /**
       * @description Foreign key. Field that holds the primary key of the related collection.
       * @example user
       */
      many_field?: string;
      /**
       * @description Collection on the _one_ side of the relationship.
       * @example directus_users
       */
      one_collection?: string;
      /**
       * @description Alias column that serves as the _one_ side of the relationship.
       * @example null
       */
      one_field?: string | null;
      one_collection_field?: string | null;
      one_allowed_collections?: string[] | null;
      /**
       * @description Field on the junction table that holds the many field of the related relation.
       * @example null
       */
      junction_field?: string | null;
      sort_field?: string | null;
      one_deselect_action?: string;
    };
    Roles: {
      /**
       * @description Unique identifier for the role.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description Name of the role.
       * @example Administrator
       */
      name?: string;
      /**
       * @description The role's icon.
       * @example verified_user
       */
      icon?: string;
      /**
       * @description Description of the role.
       * @example Admins have access to all managed data within the system by default
       */
      description?: string | null;
      /**
       * @description Array of IP addresses that are allowed to connect to the API as a user of this role.
       * @example []
       */
      ip_access?: string[];
      /**
       * @description Whether or not this role enforces the use of 2FA.
       * @example false
       */
      enforce_tfa?: boolean;
      /**
       * @description Admin role. If true, skips all permission checks.
       * @example false
       */
      admin_access?: boolean;
      /**
       * @description The users in the role are allowed to use the app.
       * @example true
       */
      app_access?: boolean;
      users?: (string | components["schemas"]["Users"])[];
    };
    Settings: {
      /**
       * @description The logo of the project.
       * @example null
       */
      project_logo?: string | null;
      /**
       * @description The background of the project.
       * @example null
       */
      public_background?: string | null;
      /**
       * @description The foreground of the project.
       * @example null
       */
      public_foreground?: string | null;
      /**
       * Format: uuid
       * @description Default folder to place files
       */
      storage_default_folder?: string;
      /**
       * @description Unique identifier for the setting.
       * @example 1
       */
      id?: number;
      /**
       * @description The name of the project.
       * @example Directus
       */
      project_name?: string;
      /**
       * @description The url of the project.
       * @example null
       */
      project_url?: string | null;
      /**
       * @description The brand color of the project.
       * @example null
       */
      project_color?: string | null;
      /**
       * @description Note rendered on the public pages of the app.
       * @example null
       */
      public_note?: string | null;
      /**
       * @description Allowed authentication login attempts before the user's status is set to blocked.
       * @example 25
       */
      auth_login_attempts?: number;
      /** @description Authentication password policy. */
      auth_password_policy?: string | null;
      /**
       * @description What transformations are allowed in the assets endpoint.
       * @example all
       * @enum {string|null}
       */
      storage_asset_transform?: ("all" | "none" | "presets") | null;
      /**
       * @description Array of allowed
       * @example null
       */
      storage_asset_presets?:
        | {
            /** @description Key for the asset. Used in the assets endpoint. */
            key?: string;
            /**
             * @description Whether to crop the thumbnail to match the size, or maintain the aspect ratio.
             * @enum {string}
             */
            fit?: "cover" | "contain" | "inside" | "outside";
            /** @description Width of the thumbnail. */
            width?: number;
            /** @description Height of the thumbnail. */
            height?: number;
            /** @description No image upscale */
            withoutEnlargement?: boolean;
            /** @description Quality of the compression used. */
            quality?: number;
            /**
             * @description Reformat output image
             * @enum {string}
             */
            format?: "" | "jpeg" | "png" | "webp" | "tiff";
            /** @description Additional transformations to apply */
            transforms?:
              | {
                  /** @description The Sharp method name */
                  method?: string;
                  /** @description A list of arguments to pass to the Sharp method */
                  arguments?:
                    | {
                        /** @description A JSON representation of the argument value */
                        argument?: string;
                      }[]
                    | null;
                }[]
              | null;
          }[]
        | null;
      custom_css?: string | null;
      basemaps?: unknown | null;
      mapbox_key?: string | null;
      module_bar?: unknown | null;
      project_descriptor?: string | null;
      translation_strings?: unknown | null;
      default_language?: string;
      custom_aspect_ratios?: unknown | null;
      branding_divider?: string;
      modules_divider?: string;
      security_divider?: string;
      files_divider?: string;
      map_divider?: string;
      image_editor?: string;
    };
    Users: {
      /**
       * @description Unique identifier of the role of this user.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      role?: string | components["schemas"]["Roles"];
      /**
       * @description Unique identifier for the user.
       * @example 63716273-0f29-4648-8a2a-2af2948f6f78
       */
      id?: string;
      external_identifier?: string | null;
      /**
       * Format: email
       * @description Unique email address for the user.
       * @example admin@example.com
       */
      email?: string;
      /** @description Static token for the user. */
      token?: string | null;
      /**
       * @description First name of the user.
       * @example Admin
       */
      first_name?: string;
      /**
       * @description Last name of the user.
       * @example User
       */
      last_name?: string;
      /** @description Password of the user. */
      password?: string;
      /**
       * @description The user's location.
       * @example null
       */
      location?: string | null;
      /**
       * @description The user's title.
       * @example null
       */
      title?: string | null;
      /**
       * @description The user's description.
       * @example null
       */
      description?: string | null;
      /**
       * @description The user's tags.
       * @example null
       */
      tags?: string[] | null;
      /**
       * @description The user's avatar.
       * @example null
       */
      avatar?: (string | components["schemas"]["Files"]) | null;
      /**
       * @description The user's language used in Directus.
       * @example en-US
       */
      language?: string;
      /**
       * @description What theme the user is using.
       * @example auto
       * @enum {string}
       */
      theme?: "light" | "dark" | "auto";
      /**
       * @description The 2FA secret string that's used to generate one time passwords.
       * @example null
       */
      tfa_secret?: string | null;
      /**
       * @description Status of the user.
       * @example active
       * @enum {string}
       */
      status?: "active" | "invited" | "draft" | "suspended" | "deleted";
      /** Format: timestamp */
      last_access?: string;
      /**
       * @description Last page that the user was on.
       * @example /my-project/settings/collections/a
       */
      last_page?: string | null;
      provider?: string;
      auth_data?: string | null;
      email_notifications?: boolean | null;
      preferences_divider?: string;
      admin_divider?: string;
    };
    Flows: {
      /**
       * @description Unique identifier for the flow.
       * @example 2f24211d-d928-469a-aea3-3c8f53d4e426
       */
      id?: string;
      /**
       * @description The name of the flow.
       * @example Update Articles Flow
       */
      name?: string;
      /**
       * @description Icon displayed in the Admin App for the flow.
       * @example bolt
       */
      icon?: string;
      /**
       * @description Color of the icon displayed in the Admin App for the flow.
       * @example #112233
       */
      color?: string | null;
      /**
       * @description Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
       * @example manual
       */
      trigger?: string;
      /**
       * @description Options of the selected trigger for the flow.
       * @example null
       */
      options?: { [key: string]: unknown } | null;
    };
  };
  responses: {
    /** Error: Not found. */
    NotFoundError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
    /** Error: Unauthorized request */
    UnauthorizedError: {
      content: {
        "application/json": {
          error?: {
            /** Format: int64 */
            code?: number;
            message?: string;
          };
        };
      };
    };
  };
  parameters: {
    /** @description Index */
    Id: number;
    /** @description Unique identifier for the object. */
    UUId: string;
    /** @description Collection of which you want to retrieve the items from. */
    Collection: string;
    /** @description Filter by items that contain the given search query in one of their fields. */
    Search: string;
    /** @description Cursor for use in pagination. Often used in combination with limit. */
    Page: number;
    /** @description How many items to skip when fetching data. */
    Offset: number;
    /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
    Sort: string[];
    /** @description What metadata to return in the response. */
    Meta: string;
    /** @description A limit on the number of objects that are returned. */
    Limit: number;
    /** @description Select items in collection by given conditions. */
    Filter: string[];
    /** @description Control what fields are being returned in the object. */
    Fields: string[];
    /** @description Controls if the API sets a cookie or returns a JWT on successful login. */
    Mode: "jwt" | "cookie";
  };
};

export type operations = {
  /** Image typed files can be dynamically resized and transformed to fit any need. */
  getAsset: {
    parameters: {
      path: {
        /** The id of the file. */
        id: string;
      };
      query: {
        /** The key of the asset size configured in settings. */
        key?: string;
        /** A JSON array of image transformations */
        transforms?: string;
        /** Download the asset to your computer */
        download?: boolean;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "text/plain": string;
        };
      };
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a Temporary Access Token */
  login: {
    responses: {
      /** Successful authentification */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example yuOJkjdPXMd... */
              refresh_token?: string;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're retrieving the access token for.
           * @example admin@example.com
           */
          email: string;
          /**
           * Format: password
           * @description Password of the user.
           * @example password
           */
          password: string;
          /**
           * @description Choose between retrieving the token as a string, or setting it as a cookie.
           * @default json
           * @enum {string}
           */
          mode?: "json" | "cookie";
          /** @description If 2FA is enabled, you need to pass the one time password. */
          otp?: string;
        };
      };
    };
  };
  /** Refresh a Temporary Access Token. */
  refresh: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: {
              /** @example eyJhbGciOiJI... */
              access_token?: string;
              /** @example 900 */
              expires?: number;
              /** @example Gy-caJMpmGTA... */
              refresh_token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to refresh. This token can't be expired.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
        } & {
          token: unknown;
        };
      };
    };
  };
  /** Log Out */
  logout: {
    responses: {
      /** Request successful */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description JWT access token you want to logout.
           * @example eyJ0eXAiOiJKV...
           */
          refresh_token?: string;
        } & {
          token: unknown;
        };
      };
    };
  };
  /** Request a reset password email to be send. */
  passwordRequest: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Email address of the user you're requesting a reset for.
           * @example admin@example.com
           */
          email: string;
        };
      };
    };
  };
  /** The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password. */
  passwordReset: {
    responses: {
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description One-time use JWT token that is used to verify the user.
           * @example eyJ0eXAiOiJKV1Qi...
           */
          token: string;
          /**
           * Format: password
           * @description New password for the user.
           * @example password
           */
          password: string;
        };
      };
    };
  };
  /** List configured OAuth providers. */
  oauth: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            /**
             * @example [
             *   "github",
             *   "facebook"
             * ]
             */
            data?: string[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Start OAuth flow using the specified provider */
  oauthProvider: {
    parameters: {
      path: {
        /** Key of the activated OAuth provider. */
        provider: string;
      };
      query: {
        /** Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
        redirect?: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            public?: boolean;
            data?: {
              token?: string;
            };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** List all installed custom interfaces. */
  getInterfaces: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: unknown }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom layouts. */
  getLayouts: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: unknown }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom displays. */
  getDisplays: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: unknown }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List all installed custom modules. */
  getModules: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: unknown }[];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Perform a system status check and return the options. */
  serverInfo: {
    parameters: {
      query: {
        /** The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
        super_admin_token: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: unknown };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Ping, pong. Ping.. pong. */
  ping: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/text": string;
        };
      };
    };
  };
  /** Generate a hash for a given string. */
  "hash-generate": {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            /** @example $argon2i$v=19$m=4096,t=3,p=1$pOyIa/zmRAjCVLb2f7kOyg$DasoO6LzMM+6iKfzCDq6JbsYsZWLSm33p7i9NxL9mDc */
            data?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string?: string;
        };
      };
    };
  };
  /** Generate a hash for a given string. */
  "hash-verify": {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            /** @example true */
            data?: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description String to hash. */
          string?: string;
          /** @description Hash you want to verify against. */
          hash?: string;
        };
      };
    };
  };
  /** Re-sort items in collection based on start and to value of item */
  sort: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Primary key of item to move */
          item?: number;
          /** @description Primary key of item where to move the current item to */
          to?: number;
        };
      };
    };
  };
  /** Import multiple records from a JSON or CSV file into a collection. */
  import: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  /** Export a larger data set to a file in the File Library */
  export: {
    parameters: {
      path: {
        /** Collection identifier */
        collection: string;
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description What file format to save the export to. One of csv, xml, json
           * @enum {string}
           */
          format?: "csv" | "xml" | "json";
          /** @description The query object to use for the export */
          query?: components["definitions"]["Query"];
          /** @description Partial file object to tweak where / how the export file is saved */
          file?: components["schemas"]["Files"];
        };
      };
    };
  };
  /** Resets both the data and schema cache of Directus. */
  "clear-cache": {
    responses: {
      /** Successful request */
      200: unknown;
    };
  };
  /** Returns a random string of given length. */
  random: {
    parameters: {
      query: {
        /** Length of the random string. */
        length?: number;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            /** @example 1>M3+4oh.S */
            data?: string;
          };
        };
      };
    };
  };
  /** List the articles items. */
  readItemsArticles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticles"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Retrieve a single articles item by unique identifier. */
  readSingleItemsArticles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsArticles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the home items. */
  readItemsHome: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsHome"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Retrieve a single home item by unique identifier. */
  readSingleItemsHome: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsHome"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the projects items. */
  readItemsProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjects"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Retrieve a single projects item by unique identifier. */
  readSingleItemsProjects: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
      path: {
        /** Index of the item. */
        id: number | string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["ItemsProjects"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Returns a list of activity actions. */
  getActivities: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Creates a new comment. */
  createComment: {
    parameters: {
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example projects */
          collection: string;
          /** @example 1 */
          item: number;
          /** @example A new comment */
          comment: string;
        };
      };
    };
  };
  /** Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information. */
  getActivity: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Activity"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Returns a list of the collections available in the project. */
  getCollections: {
    parameters: {
      query: {
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieves the details of a single collection. */
  getCollection: {
    parameters: {
      path: {
        /** Unique identifier of the collection. */
        id: string;
      };
      query: {
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Collections"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Returns a list of the fields available in the project. */
  getFields: {
    parameters: {
      query: {
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Returns a list of the fields available in the given collection. */
  getCollectionFields: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
      };
      query: {
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieves the details of a single field in a given collection. */
  getCollectionField: {
    parameters: {
      path: {
        /** Unique identifier of the collection the item resides in. */
        collection: string;
        /** Unique identifier of the field. */
        id: string;
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Fields"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the files. */
  getFiles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new file */
  createFile: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          data?: string;
        };
      };
    };
  };
  /** Retrieve a single file by unique identifier. */
  getFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Delete an existing file. */
  deleteFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update an existing file, and/or replace it's file contents. */
  updateFile: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Files"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "multipart/data": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: (string | components["schemas"]["Folders"]) | null;
          /** @description Tags for the file. Is automatically populated based on EXIF data for images. */
          tags?: string[] | null;
          /**
           * Format: binary
           * @description File contents.
           */
          file: unknown;
        };
        "application/json": {
          /**
           * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
           * @example User Avatar
           */
          title?: string;
          /** @description Preferred filename when file is downloaded. */
          filename_download?: string;
          /** @description Description for the file. */
          description?: string | null;
          /**
           * @description Virtual folder where this file resides in.
           * @example null
           */
          folder?: (string | components["schemas"]["Folders"]) | null;
          /** @description Tags for the file. Is automatically populated based on EXIF data for images. */
          tags?: string[] | null;
        };
      };
    };
  };
  /** List the folders. */
  getFolders: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Create a new folder. */
  createFolder: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Name of the folder.
           * @example Amsterdam
           */
          name: string;
          /** @description Unique identifier of the parent folder. This allows for nested folders. */
          parent?: number;
        };
      };
    };
  };
  /** Retrieve a single folder by unique identifier. */
  getFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Delete an existing folder */
  deleteFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing folder */
  updateFolder: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Folders"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of the folder. Can't be null or empty. */
          name?: string;
          /**
           * @description Unique identifier of the parent folder. This allows for nested folders.
           * @example 3
           */
          parent?: number;
        };
      };
    };
  };
  /** List all permissions. */
  getPermissions: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the permissions that apply to the current user. */
  getMyPermissions: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single permissions object by unique identifier. */
  getPermission: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Permissions"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the presets. */
  getPresets: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Create a new preset. */
  createPreset: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /**
           * @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.
           * @example null
           */
          role?: string;
          /** @description What the user searched for in search/filter in the header bar. */
          search?: string;
          filters?: {
            /** @example aHKLAakdVghzD */
            key?: string;
            /** @example rating */
            field?: string;
            /** @example gte */
            operator?: string;
            /** @example 4.5 */
            value?: number;
          }[];
          /** @description Name of the view type that is used. */
          layout?: string;
          /** @description Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          layout_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          layout_options?: string;
        };
      };
    };
  };
  /** Retrieve a single preset by unique identifier. */
  getPreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Delete an existing preset. */
  deletePreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
    };
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
    };
  };
  /** Update an existing preset. */
  updatePreset: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Presets"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description What collection this collection preset is used for.
           * @example articles
           */
          collection: string;
          /**
           * @description Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.
           * @example Highly rated articles
           */
          title?: string;
          /** @description The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role. */
          role?: number;
          /** @description What the user searched for in search/filter in the header bar. */
          search_query?: string;
          filters?: {
            /** @example rating */
            field?: string;
            /** @example gte */
            operator?: string;
            /** @example 4.5 */
            value?: number;
          }[];
          /** @description Name of the view type that is used. Defaults to tabular. */
          view_type?: string;
          /** @description View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters. */
          view_query?: string;
          /** @description Options of the views. The properties in here are controlled by the layout. */
          view_options?: string;
          /** @description Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages. */
          translation?: { [key: string]: unknown };
        };
      };
    };
  };
  /** List the relations. */
  getRelations: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"][];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single relation by unique identifier. */
  getRelation: {
    parameters: {
      path: {
        /** Index */
        id: components["parameters"]["Id"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Relations"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the roles. */
  getRoles: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single role by unique identifier. */
  getRole: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Roles"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the settings. */
  getSettings: {
    parameters: {
      query: {
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** Cursor for use in pagination. Often used in combination with limit. */
        page?: components["parameters"]["Page"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Settings"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** List the users. */
  getUsers: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** A limit on the number of objects that are returned. */
        limit?: components["parameters"]["Limit"];
        /** How many items to skip when fetching data. */
        offset?: components["parameters"]["Offset"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
        /** How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        sort?: components["parameters"]["Sort"];
        /** Select items in collection by given conditions. */
        filter?: components["parameters"]["Filter"];
        /** Filter by items that contain the given search query in one of their fields. */
        search?: components["parameters"]["Search"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single user by unique identifier. */
  getUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update an existing user */
  updateUser: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: { [key: string]: unknown };
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Users"];
      };
    };
  };
  /** Retrieve the currently authenticated user. */
  getMe: {
    parameters: {
      query: {
        /** Control what fields are being returned in the object. */
        fields?: components["parameters"]["Fields"];
        /** What metadata to return in the response. */
        meta?: components["parameters"]["Meta"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Update the currently authenticated user. */
  updateMe: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Users"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used. */
  updateLastUsedPageMe: {
    responses: {
      /** Successful request */
      200: unknown;
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Path of the page you used last. */
          last_page?: string;
        };
      };
    };
  };
  /** Get all flows. */
  getFlows: {
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"][];
            meta?: components["x-metadata"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
  /** Retrieve a single flow by unique identifier. */
  getFlow: {
    parameters: {
      path: {
        /** Unique identifier for the object. */
        id: components["parameters"]["UUId"];
      };
    };
    responses: {
      /** Successful request */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Flows"];
          };
        };
      };
      401: components["responses"]["UnauthorizedError"];
      404: components["responses"]["NotFoundError"];
    };
  };
};

export type external = {};
