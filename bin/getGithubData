#!/usr/bin/env node

const unfetch = require('isomorphic-unfetch');
const fs = require('fs');
const path = require('path');
const storageDir = path.resolve('./.content/github');

function reposFetch() {
    return unfetch(`https://api.github.com/users/beardcoder/repos`, {
        headers: {
            Authorization: `token af546dac1c7586e645262865beea708d6290c12f`,
            'Content-Type': 'application/json',
        },
    })
        .then(res => res.json())
        .then(data => {
            // Only get non forked repos
            const resReduce = data.filter(item => {
                return !item.fork;
            });

            return resReduce.map(item => {
                return {
                    id: item.id,
                    description: item.description,
                    full_name: item.full_name,
                    html_url: item.html_url,
                };
            });
        });
}

function snippetsFetch() {
    return unfetch(`https://api.github.com/users/beardcoder/gists`, {
        headers: {
            Authorization: `token af546dac1c7586e645262865beea708d6290c12f`,
            'Content-Type': 'application/json',
        },
    })
        .then(res => res.json())
        .then(data =>
            data.map(item => {
                return {
                    id: item.id,
                    description: item.description,
                    html_url: item.html_url,
                };
            })
        );
}

fs.mkdirSync(storageDir, { recursive: true });

reposFetch().then(res => {
    fs.writeFile(`${storageDir}/repos.json`, JSON.stringify(res), function(err) {
        if (err) {
            return console.log(err);
        }
        console.log(`The file ${storageDir}/repos.json was saved!`);
    });
});

snippetsFetch().then(res => {
    fs.writeFile(`${storageDir}/snippets.json`, JSON.stringify(res), function(err) {
        if (err) {
            return console.log(err);
        }
        console.log(`The file ${storageDir}/snippets.json was saved!`);
    });
});
