{
  "title": "Mehrsprachigkeit in VueJS und Nuxt",
  "date": "2019-11-30T20:22:19.227Z",
  "description": "Wenn man eine Neue seite erstellt oder eine Bestehende Seite Neu aufbaut stellt man sich zu beginn der Arbeit meist die Frage: ‚ÄûIst die Zielgruppe meiner Webseite National oder International‚Äú. Wenn die Anwort ‚ÄûInternational‚Äú lautet oder du von beginn an Flexibel bleiben Willst dann habe ich hier genau den Richtigen Artikel f√ºr dich. Denn das Projekt vue-i18n von Kazuya Kawaguchi hat hat mitlerweile √ºber 120 Contributors und wird stetig weiter Entwickelt.",
  "author": "Markus Sommer",
  "image": "/img/mehrsprachigkeit-in-vuejs-und-nuxt.jpg",
  "thumbnail": "/img/mehrsprachigkeit-in-vuejs-und-nuxt-thumbnail.jpg",
  "bodyContent": "Das VueJS Plugin vue-i18n k√∂nnt ihr euch auf GitHub ansehen https://github.com/kazupon/vue-i18n.\nDort findest du schon mal die Dokumentation http://kazupon.github.io/vue-i18n/ und erste Informationen zu dem Projekt. Diese Sind im Repo selbst leider sehr Sp√§rlich aber, sobald man auf die Dokumentation geht, merkt man das Hier sehr viel Zeit und Liebe hineingeflossen ist.\n\n## Installation\n\nDie Installation des Plugins gestaltet sich erst einmal sehr einfach. Man kann es mittels Paketmanager yarn oder npm installieren.\n\n```bash\nyarn add vue-i18n # f√ºr VueJS\n# oder\nnpm install vue-i18n # f√ºr VueJS\n\nyarn add nuxt-i18n # f√ºr Nuxt\n# oder\nnpm i nuxt-i18n # f√ºr Nuxt\n```\n\nWenn man die vue-cli verwendet dann kann man das Plugin auch hier recht einfach Integrieren.\n\n```bash\nvue add vue-i18n\n```\n\n## Integration in VueJS\n\nIn einer normalen VueJS Applikation geht das sehr einfach.\n\nDu brauchst lediglich ein Plugin anzulegen mit diesem Inhalt\n\n```js\n// plugins/vue-i18n.js\nimport Vue from 'vue';\nimport VueI18n from 'vue-i18n';\n\nVue.use(VueI18n);\n```\n\nDanach einfach das Plugin in Vue laden.\n\n```js\n// ./main.js\nimport '~/plugins/vue-i18n';\n\nnew Vue({\n    render: h => h(App),\n}).$mount('#app');\n```\n\n## Integration in Nuxt\n\nHier geht das um einige einfacher denn ein Entwickler hat schon ein fertiges Modul bereitgestellt das wir nach der Installation einfach in der Datei nuxt.config.js integrieren k√∂nnen. https://github.com/nuxt-community/nuxt-i18n\n\n```js\nexport default {\n    /*\n     ** Nuxt.js modules\n     */\n    modules: [\n        // Doc: https://axios.nuxtjs.org/usage\n        '@nuxtjs/axios',\n        // Doc: https://github.com/nuxt-community/nuxt-i18n\n        'nuxt-i18n',\n    ],\n};\n```\n\n## Konfiguration\n\nJetzt gehts ans Eingemachte üòÄ. Da ich sehr gerne die √úbersetzungen in eigenen Dateien vorhalte, damit ich sie einfach von Projekt zu Projekt √ºbernehmen kann, oder zu den √úbersetzern schicken kann, habe ich hier in diesem Artikel auf diese Option gew√§hlt.\n\n### Konfiguration Datei\n\nZuerst erstellen wir uns eine Konfiguration f√ºr unser Projekt damit wir definieren k√∂nnen welche Sprachen wir verwenden und wie sich vue-i18n verhalten soll.\n\n```js\n// ./i18n/index.js\nexport default {\n    locales: [\n        {\n            code: 'de',\n            iso: 'de-DE',\n            name: 'Deutsch',\n            file: 'de.js', // hier wird definiert wie die datei hei√üt aus der er die sprache importieren soll\n        },\n        {\n            code: 'en',\n            iso: 'en-US',\n            name: 'English',\n            file: 'en.js', // hier wird definiert wie die datei hei√üt aus der er die sprache importieren soll\n        },\n    ],\n    defaultLocale: 'de',\n    langDir: 'i18n/', // hier liegen unsere Sprachen\n    lazy: true,\n    vuex: {\n        moduleName: 'i18n',\n        mutations: {\n            setLocale: false,\n            setMessages: false,\n        },\n        preserveState: false,\n    },\n    vueI18n: {\n        fallbackLocale: 'de',\n    },\n};\n```\n\nDiese Konfigurationsdatei wird nun einfach in die Integration unseres Plugins importiert. Dies sieht bei VueJS etwas anders aus als bei Nuxt.\n\n```js\n// plugins/vue-i18n.js\nimport Vue from 'vue';\nimport VueI18n from 'vue-i18n';\nimport i18n from '~/i18n';\n\nVue.use(VueI18n, i18n);\n```\n\n```js\nimport i18n from '~/i18n';\nexport default {\n    /*\n     ** Nuxt.js modules\n     */\n    modules: [\n        // Doc: https://axios.nuxtjs.org/usage\n        '@nuxtjs/axios',\n        ['nuxt-i18n', i18n],\n    ],\n};\n```\n\n## Benutzung\n\nDie Benutzung des Plugins unterscheidet sich nicht zwischen VueJS und Nuxt solange es nur um die Lokalisierung geht.\n\n```html\n<p>{{ $t('message.hello', { msg: 'hello' }) }}</p>\n```\n\n### VueJS\n\nWenn es aber jetzt um den Switch der Sprache geht, sieht das schon anders aus. In einer normalen VueJS Anwendung geht das √ºber die globale Variable `$i18n.locale`\nWichtig ist zu wissen das, wenn man sich in einer Komponente befindet man `$root` aufrufen muss da ansonsten nur die Komponente in der Sprache gewechselt wird.\n\n```js\n$root.$i18n.locale = 'de';\n```\n\n### Nuxt\n\nIn einer Nuxt Anwendung stehen uns f√ºr das √Ñndern der Sprache hier 2 M√∂glichkeiten zur Verf√ºgung\n\nEinmal das Wechseln der Sprache √ºber einen Nuxt Link\n\n```html\n<nuxt-link\n    v-for=\"locale in availableLocales\"\n    :key=\"locale.code\"\n    :to=\"switchLocalePath(locale.code)\"\n>\n    {{ locale.name }}\n</nuxt-link>\n```\n\n```js\nexport default {\n    computed: {\n        availableLocales() {\n            return this.$i18n.locales.filter(i => i.code !== this.$i18n.locale);\n        },\n    },\n};\n```\n\nDie andere Variante ist das Wechseln der Sprache √ºber die Routen. Denn das Nuxt Module erweitert die Routen um einen Sprachparameter.\n\n```js\n[\n    {\n        path: '/',\n        component: _3237362a,\n        name: 'index___de',\n    },\n    {\n        path: '/en/',\n        component: _3237362a,\n        name: 'index___en',\n    },\n    {\n        path: '/about',\n        component: _71a6ebb4,\n        name: 'about___de',\n    },\n    {\n        path: '/en/about',\n        component: _71a6ebb4,\n        name: 'about___en',\n    },\n];\n```",
  "bodyHtml": "<p>Das VueJS Plugin vue-i18n k√∂nnt ihr euch auf GitHub ansehen https://github.com/kazupon/vue-i18n.\nDort findest du schon mal die Dokumentation http://kazupon.github.io/vue-i18n/ und erste Informationen zu dem Projekt. Diese Sind im Repo selbst leider sehr Sp√§rlich aber, sobald man auf die Dokumentation geht, merkt man das Hier sehr viel Zeit und Liebe hineingeflossen ist.</p>\n<h2>Installation</h2>\n<p>Die Installation des Plugins gestaltet sich erst einmal sehr einfach. Man kann es mittels Paketmanager yarn oder npm installieren.</p>\n<pre><code class=\"hljs\">yarn add vue-i18n <span class=\"hljs-comment\"># f√ºr VueJS</span>\n<span class=\"hljs-comment\"># oder</span>\nnpm install vue-i18n <span class=\"hljs-comment\"># f√ºr VueJS</span>\n\nyarn add nuxt-i18n <span class=\"hljs-comment\"># f√ºr Nuxt</span>\n<span class=\"hljs-comment\"># oder</span>\nnpm i nuxt-i18n <span class=\"hljs-comment\"># f√ºr Nuxt</span></code></pre><p>Wenn man die vue-cli verwendet dann kann man das Plugin auch hier recht einfach Integrieren.</p>\n<pre><code class=\"hljs\">vue add vue-i18n</code></pre><h2>Integration in VueJS</h2>\n<p>In einer normalen VueJS Applikation geht das sehr einfach.</p>\n<p>Du brauchst lediglich ein Plugin anzulegen mit diesem Inhalt</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// plugins/vue-i18n.js</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>;\n<span class=\"hljs-keyword\">import</span> VueI18n <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-i18n'</span>;\n\nVue.use(VueI18n);</code></pre><p>Danach einfach das Plugin in Vue laden.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// ./main.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'~/plugins/vue-i18n'</span>;\n\n<span class=\"hljs-keyword\">new</span> Vue({\n    <span class=\"hljs-attr\">render</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h(App),\n}).$mount(<span class=\"hljs-string\">'#app'</span>);</code></pre><h2>Integration in Nuxt</h2>\n<p>Hier geht das um einige einfacher denn ein Entwickler hat schon ein fertiges Modul bereitgestellt das wir nach der Installation einfach in der Datei nuxt.config.js integrieren k√∂nnen. https://github.com/nuxt-community/nuxt-i18n</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">/*\n     ** Nuxt.js modules\n     */</span>\n    <span class=\"hljs-attr\">modules</span>: [\n        <span class=\"hljs-comment\">// Doc: https://axios.nuxtjs.org/usage</span>\n        <span class=\"hljs-string\">'@nuxtjs/axios'</span>,\n        <span class=\"hljs-comment\">// Doc: https://github.com/nuxt-community/nuxt-i18n</span>\n        <span class=\"hljs-string\">'nuxt-i18n'</span>,\n    ],\n};</code></pre><h2>Konfiguration</h2>\n<p>Jetzt gehts ans Eingemachte üòÄ. Da ich sehr gerne die √úbersetzungen in eigenen Dateien vorhalte, damit ich sie einfach von Projekt zu Projekt √ºbernehmen kann, oder zu den √úbersetzern schicken kann, habe ich hier in diesem Artikel auf diese Option gew√§hlt.</p>\n<h3>Konfiguration Datei</h3>\n<p>Zuerst erstellen wir uns eine Konfiguration f√ºr unser Projekt damit wir definieren k√∂nnen welche Sprachen wir verwenden und wie sich vue-i18n verhalten soll.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// ./i18n/index.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">locales</span>: [\n        {\n            <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'de'</span>,\n            <span class=\"hljs-attr\">iso</span>: <span class=\"hljs-string\">'de-DE'</span>,\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Deutsch'</span>,\n            <span class=\"hljs-attr\">file</span>: <span class=\"hljs-string\">'de.js'</span>, <span class=\"hljs-comment\">// hier wird definiert wie die datei hei√üt aus der er die sprache importieren soll</span>\n        },\n        {\n            <span class=\"hljs-attr\">code</span>: <span class=\"hljs-string\">'en'</span>,\n            <span class=\"hljs-attr\">iso</span>: <span class=\"hljs-string\">'en-US'</span>,\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'English'</span>,\n            <span class=\"hljs-attr\">file</span>: <span class=\"hljs-string\">'en.js'</span>, <span class=\"hljs-comment\">// hier wird definiert wie die datei hei√üt aus der er die sprache importieren soll</span>\n        },\n    ],\n    <span class=\"hljs-attr\">defaultLocale</span>: <span class=\"hljs-string\">'de'</span>,\n    <span class=\"hljs-attr\">langDir</span>: <span class=\"hljs-string\">'i18n/'</span>, <span class=\"hljs-comment\">// hier liegen unsere Sprachen</span>\n    <span class=\"hljs-attr\">lazy</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">vuex</span>: {\n        <span class=\"hljs-attr\">moduleName</span>: <span class=\"hljs-string\">'i18n'</span>,\n        <span class=\"hljs-attr\">mutations</span>: {\n            <span class=\"hljs-attr\">setLocale</span>: <span class=\"hljs-literal\">false</span>,\n            <span class=\"hljs-attr\">setMessages</span>: <span class=\"hljs-literal\">false</span>,\n        },\n        <span class=\"hljs-attr\">preserveState</span>: <span class=\"hljs-literal\">false</span>,\n    },\n    <span class=\"hljs-attr\">vueI18n</span>: {\n        <span class=\"hljs-attr\">fallbackLocale</span>: <span class=\"hljs-string\">'de'</span>,\n    },\n};</code></pre><p>Diese Konfigurationsdatei wird nun einfach in die Integration unseres Plugins importiert. Dies sieht bei VueJS etwas anders aus als bei Nuxt.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// plugins/vue-i18n.js</span>\n<span class=\"hljs-keyword\">import</span> Vue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>;\n<span class=\"hljs-keyword\">import</span> VueI18n <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue-i18n'</span>;\n<span class=\"hljs-keyword\">import</span> i18n <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'~/i18n'</span>;\n\nVue.use(VueI18n, i18n);</code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">import</span> i18n <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'~/i18n'</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">/*\n     ** Nuxt.js modules\n     */</span>\n    <span class=\"hljs-attr\">modules</span>: [\n        <span class=\"hljs-comment\">// Doc: https://axios.nuxtjs.org/usage</span>\n        <span class=\"hljs-string\">'@nuxtjs/axios'</span>,\n        [<span class=\"hljs-string\">'nuxt-i18n'</span>, i18n],\n    ],\n};</code></pre><h2>Benutzung</h2>\n<p>Die Benutzung des Plugins unterscheidet sich nicht zwischen VueJS und Nuxt solange es nur um die Lokalisierung geht.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ $t('message.hello', { msg: 'hello' }) }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3>VueJS</h3>\n<p>Wenn es aber jetzt um den Switch der Sprache geht, sieht das schon anders aus. In einer normalen VueJS Anwendung geht das √ºber die globale Variable <code>$i18n.locale</code>\nWichtig ist zu wissen das, wenn man sich in einer Komponente befindet man <code>$root</code> aufrufen muss da ansonsten nur die Komponente in der Sprache gewechselt wird.</p>\n<pre><code class=\"hljs\">$root.$i18n.locale = <span class=\"hljs-string\">'de'</span>;</code></pre><h3>Nuxt</h3>\n<p>In einer Nuxt Anwendung stehen uns f√ºr das √Ñndern der Sprache hier 2 M√∂glichkeiten zur Verf√ºgung</p>\n<p>Einmal das Wechseln der Sprache √ºber einen Nuxt Link</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nuxt-link</span>\n    <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"locale in availableLocales\"</span>\n    <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"locale.code\"</span>\n    <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"switchLocalePath(locale.code)\"</span>\n&gt;</span>\n    {{ locale.name }}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nuxt-link</span>&gt;</span></code></pre><pre><code class=\"hljs\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">computed</span>: {\n        availableLocales() {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.$i18n.locales.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> i.code !== <span class=\"hljs-keyword\">this</span>.$i18n.locale);\n        },\n    },\n};</code></pre><p>Die andere Variante ist das Wechseln der Sprache √ºber die Routen. Denn das Nuxt Module erweitert die Routen um einen Sprachparameter.</p>\n<pre><code class=\"hljs\">[\n    {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/'</span>,\n        <span class=\"hljs-attr\">component</span>: _3237362a,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'index___de'</span>,\n    },\n    {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/en/'</span>,\n        <span class=\"hljs-attr\">component</span>: _3237362a,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'index___en'</span>,\n    },\n    {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/about'</span>,\n        <span class=\"hljs-attr\">component</span>: _71a6ebb4,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'about___de'</span>,\n    },\n    {\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/en/about'</span>,\n        <span class=\"hljs-attr\">component</span>: _71a6ebb4,\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'about___en'</span>,\n    },\n];</code></pre>",
  "preview": "Das VueJS Plugin vue-i18n k√∂nnt ihr euch auf GitHub ansehen https://github.com/kazupon/vue-i18n.\nDort findest",
  "dir": "content",
  "base": "2019-11-30-mehrsprachigkeit-in-vuejs-und-nuxt.json",
  "ext": ".json",
  "sourceBase": "2019-11-30-mehrsprachigkeit-in-vuejs-und-nuxt.md",
  "sourceExt": ".md"
}