{
  "title": "Mehrsprachigkeit in VueJS und Nuxt",
  "date": "2019-11-30T20:22:19.227Z",
  "description": "Wenn man eine Neue seite erstellt oder eine Bestehende Seite Neu aufbaut stellt man sich zu beginn der Arbeit meist die Frage: ‚ÄûIst die Zielgruppe meiner Webseite National oder International‚Äú. Wenn die Anwort ‚ÄûInternational‚Äú lautet oder du von beginn an Flexibel bleiben Willst dann habe ich hier genau den Richtigen Artikel f√ºr dich. Denn das Projekt vue-i18n von Kazuya Kawaguchi hat hat mitlerweile √ºber 120 Contributors und wird stetig weiter Entwickelt.",
  "author": "Markus Sommer",
  "image": "/img/mehrsprachigkeit-in-vuejs-und-nuxt.jpg",
  "thumbnail": "/img/mehrsprachigkeit-in-vuejs-und-nuxt-thumbnail.jpg",
  "body": "Das VueJS Plugin vue-i18n k√∂nnt ihr euch auf GitHub ansehen https://github.com/kazupon/vue-i18n.\nDort findest du schon mal die Dokumentation http://kazupon.github.io/vue-i18n/ und erste Informationen zu dem Projekt. Diese Sind im Repo selbst leider sehr Sp√§rlich aber, sobald man auf die Dokumentation geht, merkt man das Hier sehr viel Zeit und Liebe hineingeflossen ist.\n\n## Installation\nDie Installation des Plugins gestaltet sich erst einmal sehr einfach. Man kann es mittels Paketmanager yarn oder npm installieren.\n\n```bash\nyarn add vue-i18n # f√ºr VueJS\n# oder\nnpm install vue-i18n # f√ºr VueJS\n\nyarn add nuxt-i18n # f√ºr Nuxt\n# oder\nnpm i nuxt-i18n # f√ºr Nuxt \n```\n\nWenn man die vue-cli verwendet dann kann man das Plugin auch hier recht einfach Integrieren. \n\n```bash\nvue add vue-i18n\n```\n\n## Integration in VueJS\nIn einer normalen VueJS Applikation geht das sehr einfach.\n\nDu brauchst lediglich ein Plugin anzulegen mit diesem Inhalt\n\n```js\n// plugins/vue-i18n.js\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\n\nVue.use(VueI18n)\n```\n\nDanach einfach das Plugin in Vue laden.\n\n```js\n// ./main.js\nimport '~/plugins/vue-i18n';\n\nnew Vue({\n    render: h => h(App),\n}).$mount('#app');\n```\n\n## Integration in Nuxt\nHier geht das um einige einfacher denn ein Entwickler hat schon ein fertiges Modul bereitgestellt das wir nach der Installation einfach in der Datei nuxt.config.js integrieren k√∂nnen. https://github.com/nuxt-community/nuxt-i18n\n\n```js\nexport default {\n    /*\n     ** Nuxt.js modules\n     */\n    modules: [\n        // Doc: https://axios.nuxtjs.org/usage\n        '@nuxtjs/axios',\n        // Doc: https://github.com/nuxt-community/nuxt-i18n\n        'nuxt-i18n',\n    ],\n}\n```\n\n## Konfiguration\nJetzt gehts ans Eingemachte üòÄ. Da ich sehr gerne die √úbersetzungen in eigenen Dateien vorhalte, damit ich sie einfach von Projekt zu Projekt √ºbernehmen kann, oder zu den √úbersetzern schicken kann, habe ich hier in diesem Artikel auf diese Option gew√§hlt.\n\n### Konfiguration Datei\nZuerst erstellen wir uns eine Konfiguration f√ºr unser Projekt damit wir definieren k√∂nnen welche Sprachen wir verwenden und wie sich vue-i18n verhalten soll.\n\n```js\n// ./i18n/index.js\nexport default {\n    locales: [\n        {\n            code: 'de',\n            iso: 'de-DE',\n            name: 'Deutsch',\n            file: 'de.js', // hier wird definiert wie die datei hei√üt aus der er die sprache importieren soll\n        },\n        {\n            code: 'en',\n            iso: 'en-US',\n            name: 'English',\n            file: 'en.js', // hier wird definiert wie die datei hei√üt aus der er die sprache importieren soll\n        },\n    ],\n    defaultLocale: 'de',\n    langDir: 'i18n/', // hier liegen unsere Sprachen\n    lazy: true,\n    vuex: {\n        moduleName: 'i18n',\n        mutations: {\n            setLocale: false,\n            setMessages: false,\n        },\n        preserveState: false,\n    },\n    vueI18n: {\n        fallbackLocale: 'de',\n    },\n};\n```\n\nDiese Konfigurationsdatei wird nun einfach in die Integration unseres Plugins importiert. Dies sieht bei VueJS etwas anders aus als bei Nuxt.\n\n```js\n// plugins/vue-i18n.js\nimport Vue from 'vue'\nimport VueI18n from 'vue-i18n'\nimport i18n from '~/i18n'\n\nVue.use(VueI18n, i18n)\n```\n\n```js\nimport i18n from '~/i18n'\nexport default {\n    /*\n     ** Nuxt.js modules\n     */\n    modules: [\n        // Doc: https://axios.nuxtjs.org/usage\n        '@nuxtjs/axios',\n        ['nuxt-i18n', i18n],\n    ],\n}\n```\n\n## Benutzung\nDie Benutzung des Plugins unterscheidet sich nicht zwischen VueJS und Nuxt solange es nur um die Lokalisierung geht.\n\n```html\n<p>{{ $t('message.hello', { msg: 'hello' }) }}</p>\n```\n\n### VueJS\nWenn es aber jetzt um den Switch der Sprache geht, sieht das schon anders aus. In einer normalen VueJS Anwendung geht das √ºber die globale Variable `$i18n.locale`\nWichtig ist zu wissen das, wenn man sich in einer Komponente befindet man `$root` aufrufen muss da ansonsten nur die Komponente in der Sprache gewechselt wird.\n\n```js\n$root.$i18n.locale = 'de'\n```\n\n### Nuxt\nIn einer Nuxt Anwendung stehen uns f√ºr das √Ñndern der Sprache hier 2 M√∂glichkeiten zur Verf√ºgung\n\nEinmal das Wechseln der Sprache √ºber einen Nuxt Link\n\n```html\n<nuxt-link\n  v-for=\"locale in availableLocales\"\n  :key=\"locale.code\"\n  :to=\"switchLocalePath(locale.code)\">{{ locale.name }}</nuxt-link>\n```\n\n```js\nexport default {\n    computed: {\n        availableLocales () {\n          return this.$i18n.locales.filter(i => i.code !== this.$i18n.locale)\n        }\n    }\n}\n```\n\nDie andere Variante ist das Wechseln der Sprache √ºber die Routen. Denn das Nuxt Module erweitert die Routen um einen Sprachparameter.\n\n```js\n[\n  {\n    path: \"/\",\n    component: _3237362a,\n    name: \"index___de\"\n  },\n  {\n    path: \"/en/\",\n    component: _3237362a,\n    name: \"index___en\"\n  },\n  {\n    path: \"/about\",\n    component: _71a6ebb4,\n    name: \"about___de\"\n  },\n  {\n    path: \"/en/about\",\n    component: _71a6ebb4,\n    name: \"about___en\"\n  }\n]\n```"
}