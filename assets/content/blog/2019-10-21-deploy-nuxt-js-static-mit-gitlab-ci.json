{
  "title": "Deploy nuxt.js static mit gitlab-ci",
  "date": "2019-09-27T18:31:42.478Z",
  "description": "In diesem Artikel zeige ich euch wie ihr eine Nuxt Application mit der Gitlab-CI bauen und auf dem Server ausrollen könne.",
  "author": "Markus Sommer",
  "image": "/img/deploy-nuxt-js-static-with-gitlab-ci.jpg",
  "thumbnail": "/img/deploy-nuxt-js-static-with-gitlab-ci-thumbnail.jpg",
  "body": "## Vorbereitung\n\n### Die App\n\nZuerst brauchen wir eine nuxt Applikation, die wir ausliefern möchten.\nDiese können wir relativ einfach über einen Terminal Befehl erstellen.\n\n```bash\nnpx create-nuxt-app my-website\n```\n\n### Das Repository\n\nUm den CI Prozess von Gitlab zu nutzen, reicht ein Kostenloser Account, in dem man ein Neues Repository anlegt oder ein bestehendes benutzt.\n\n![Alt Text](https://thepracticaldev.s3.amazonaws.com/i/3j0m2pr0yn2wf6x6qt8x.jpg)\n\nWie man ein neues Anlegt kann man auf der Seite <a href=\"https://docs.gitlab.com/ee/user/project/repository/#create-a-repository\" target=\"_blank\">https://docs.gitlab.com</a> nachlesen\n\nNachdem man dies erledigt hat, muss man einen Private Key hinterlegen. Die CI braucht diesen um Daten via rsync ausliefern zu können.\n\nWie man ein Key Paar erstellt findet ihr hier. <a href=\"https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key\" target=\"_blank\">https://help.github.com/</a>\n\nIn meinem Fall wird die Variable SSH_PRIVATE_KEY genannt. Diese Bezeichnung brauchen wir später in unserer Konfiguration\n\n![Alt Text](https://thepracticaldev.s3.amazonaws.com/i/ix24yyppgtjru8gq3bj9.jpg)\n\nDen Public Key müsst ihr dann auf Euerem Server hinterlegen. **Wichtig** ist hier das der **Key** auch dem **Benutzer zugeordnet** wird der später auch von nginx benutzt wird, um die Seite auszuliefern. Meistens ist dies der www-data Benutzer.\n\n### Abschluss der Vorbereitung\n\nSo mehr müsst ich auch schon nicht machen denn ab jetzt kommt es nur noch auf die Konfiguration an.\n\n## Gitlab CI\n\nUm die Gitlab CI anzusprechen brauchen wir eine Datei im root unseres Projektes.\n\nDiese Datei trägt den Namen .gitlab-ci.yaml.\n\nSobald Gitlab diese Datei erkennt, wird der CI Runner Aktiv und führt die Darin enthaltenen Befehle aus.\n\n### Image\n\nDas Image, dass wir definieren wird für alle Befehle verwendet die nicht ein Explizites image besitzen. Wir verwenden des Node image da dies alles hat was wir zum Bauen unserer Applikation benötigen.\n\n```yaml\nimage: node\n```\n\n### Variablen\n\nHier Definieren wir weitere Variablen um sie nicht immer wieder eingeben zu müssen und unsere Datei auch in anderen Projekten verwenden zu können.\n\n```yaml\nvariables:\n    RSYNC: rsync -rtqx --links --safe-links --chmod=Du=rwx,Dgo=rx,Fu=rw,Fog=r --delete\n\n    PROD_URL: https://creativeworkspace.de/\n    PROD_USER: web_www\n    PROD_SERVER: 159.69.21.63\n    PROD_PATH: /var/www/clients/client1/web1/web\n    PROD_PORT: '22'\n```\n\n### Cache\n\nDamit gitlab zwischen den Stages die Daten nicht immer neu herunterladen muss und auch ein erneutes Ausführen schneller geht. Lassen wir gitlab den node_modules Ordner speichern. Dies spart uns sehr viel zeit, wenn wir mehrere Builds in kurzen abständen machen.\n\n```yaml\ncache:\n    paths:\n        - node_modules/\n```\n\n### Die Stages\n\nDamit wir eine Kontrolle haben welcher Prozess von Gitlab in welcher Reihenfolge ausgeführt wird erstellen wir 2 Stages.\nDiese Referenzieren wir in unseren Aufgaben die, die Gitlab CI Ausführen soll\n\n```yaml\nstages:\n    - build\n    - deploy\n```\n\n### Die Aufgaben\n\nDie erste Aufgabe die Gitlab für uns erledigen soll ist das Bauen der Application. Wir speichern uns danach den ordner _dist_ als Artefakt damit wir diesen dann im 2. Schritt deployen können.\n\n```yaml\nbuild:\n    stage: build\n    before_script:\n        - npm install\n    script:\n        - NODE_ENV=production npm run build\n        - NODE_ENV=production npm run generate\n    environment:\n        name: production\n    artifacts:\n        expire_in: 1 hour\n        name: '${CI_COMMIT_REF_NAME}'\n        paths:\n            - dist/\n```\n\nAls nächstes soll Gitlab für uns die Code Ausliefern.\nFür diesen Schritt benutze ich nun ein anderes Image das eine RSYNC Kompenente besitzt.\n\nHier passiert jetzt sehr viel auf einmal. Zuerst Fügen wir unseren generierten SSH Key zum Image hinzu. Anschließend führen wir einen RSYNC auf unseren Server aus. Somit haben wir dann den Inhalt des *_dist_ Ordners auf unserem server in dem Pfad den wir in den Variablen angegeben haben.\n\n```yaml\ndeploy:prod:\n    stage: deploy\n    image: 1drop/php-73-docker-utils\n    environment:\n        name: production\n        url: https://creativeworkspace.de\n    before_script:\n        - eval $(ssh-agent -s)\n        - echo \"$SSH_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\n        - mkdir -p ~/.ssh\n        - echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config\n        - cd dist/\n    script:\n        - $RSYNC -e \"ssh -p $PROD_PORT\" . $PROD_USER@$PROD_SERVER:$PROD_PATH\n    only:\n        - master\n```\n\n## Abschluss\n\nAb jetzt brauchen wir unserem nginx nur noch sagen, dass er die Daten aus diesem Verzeichnis ausliefern soll und fertig :)"
}