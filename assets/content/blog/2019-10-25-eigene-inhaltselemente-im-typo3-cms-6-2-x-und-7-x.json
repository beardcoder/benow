{
  "title": "Eigene Inhaltselemente im TYPO3 CMS 6.2.x und 7.x",
  "date": "2017-09-27T17:34:00.000Z",
  "description": "Einfach und schnell eigene Inhaltselemente im TYPO3 CMS erstellen.",
  "author": "Markus Sommer",
  "image": "/img/2017-09-27-eigene-inhaltselemente-im-typo3-cms-6-2-x-und-7-x-full.jpg",
  "thumbnail": "/img/2017-09-27-eigene-inhaltselemente-im-typo3-cms-6-2-x-und-7-x-thumbnail.jpg",
  "body": "Wer hat nicht schon mal das Problem gehabt das ein Kunde oder man selbst ein youtube Video oder einen Button gebraucht hat. Dafür aber gleich eine Extension einbauen? Sein TYPO3 CMS mit zusätzlichen Features belasten, obwohl man diese vielleicht gar nicht braucht?\n\nWas wir als Erstes brauchen ist eine eigene Extension als Grundlage. Diese muss nicht viel enthalten. Es reicht, wenn sie lediglich aus folgender Struktur besteht.\n\n```\neigene_inhaltselemente\n    Configuration\n        TypoScript\n            setup.txt\n    TCA\n        Overrides\n            tt_content.php\n    Resources\n        Private\n            Templates\n                NameDesContentEmementes.html\n    ext_tables.php\n    ext_emconf.php\n```\nIch beziehe mich hier auf die Extbase Struktur. Jedem ist aber selbst überlassen wie er seine Extensions aufbaut. Falls man an größeren Projekten arbeitet sollte man sich auf alle Fälle auf eine Struktur festlegen. Diese erleichtert das Arbeiten im Team ungemein. Weitere Dateien die angelegt werden können sind z.b. ext_icon.png|gif|svg und ext_tables.sql. Alle weiteren Optionen findet ihr im <a href=\"http://wiki.typo3.org/Extension_Developers_Guide\" target=\"_blank\">TYPO3 Wiki Developer Guide</a>.\n\n## ext_emconf.php\nAls erstes befassen wir uns kurz mit der ext_emconf.php. Diese dient alleine dazu das wir später die Extension auch im TYPO3 Extensionmanager finden und aktivieren können. Ohne diese Aktivierung greifen unsere Einstellungen und Programmierungen nicht.\n\n```php\n$EM_CONF[$_EXTKEY] = array(\n\t'title' => 'Inhaltselemente',\n\t'description' => 'Eigene Inhaltselemente für meine Webseite',\n\t'category' => 'misc',\n\t'version' => '0.0.1',\n\t'dependencies' => 'cms,extbase,fluid',\n\t'state' => 'beta',\n\t'author' => 'Markus Sommer',\n);\n```\n\nGenaue Details zu dieser Datei findet man im TYPO3 Wiki.\n\n## ext_tables.php\nAls nächstes kommt die wichtigste Datei. Hier wird die Extension konfiguriert und damit natürlich auch unser Inhaltselement.\n\nWir binden dazu 2 Codeblöcke ein die je nach Bedarf natürlich erweitert werden können.\n\n## TypoScript\nPageTS einbinden für den »Content Wizzard«\n\n### 1. TypoScript einbinden\n\nDas Einbinden des TypoScripts in dem wir die Konfiguration für das Inhaltselement angeben.\n\n```php\nTYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addStaticFile($_EXTKEY, 'Configuration/TypoScript', 'Eigene Inhaltselemente');\n```\n\n### 2. Zum Content Wizzard hinzufügen\n\nDamit unser neues Element auch im »Content Wizzard« verfügbar ist müssen wir das PageTS erweitern um folgende Zeilen. Damit wir keine zusätzliche TypoScript Datei benötigen können wir eine Function des TYPO3 CORE's benutzen um unser PageTS einzubinden. Zudem Registrieren wir uns gleich einen Eigenen Tap namens OnePage um unsere Eigenen Elemente einfacher zu finden.\n\n```php\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addPageTSConfig('\nmod {\n\twizards.newContentElement.wizardItems.extra {\n\t\theader = OnePage\n\t\telements {\n\t\t\tvideo_content {\n\t\t\t\ticon = ../typo3conf/ext/eigene_inhaltselemente/Resources/Public/Images/Backend/ContentElements/VideoContent.png\n\t\t\t\ttitle = Video Content Element \n\t\t\t\tdescription = Ein Element für Youtube Videos\n\t\t\t\ttt_content_defValues {\n\t\t\t\t\tCType = video_content\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tshow = *\n\t}\n}\n');\n```\n\n## tt_content erweitern »meine_extension/ Configuration/ TCA/ Overrides/ tt_content.php«\n\nDieser Teil definiert und registriert unser Inhaltselement im TCA. Im array »showitem« legen wir fest welche Felder unser Inhaltselement bekommen soll. Hier haben wir die freie Auswahl aus den Standartfeldern der Inhaltselemente die das TYPO3 CMS mit bringt.\n\nNatürlich können wir hier auch eigene Felder erstellen. Diese kann man dann in der ext_tables.sql eintragen. Diese Datei enthält das SQL-Statement das die Tabellen erzeugt oder aktualisiert.\n\nIn meinem Beispiel benutze ich die Felder »bodytext« um die URL zum Video abzuspeichern. Im Feld \"image\" wird über das FAL wird ein Thumbnail gesetzt das wir später Ausgeben. Die Überschrift definieren wir über »header« und fügen über »subheader« eine Unterüberschrift ein. Danach fügen wir noch die Zugriffs und Extended Tabs hinzu. Diese dienen der Zeitgesteuerten Veröffentlichung und des Zugriffsschutzes falls man Frontenduser hat.\n\n```php\n$tca = array(\n\t'types' => array(\n\t\t'video_content' => array(\n\t\t\t'showitem' => '--palette--;LLL:EXT:cms/locallang_ttc.xlf:palette.general;general,\n\tbodytext;Youtube Video URL,\n\timage;Thumbnail,\n\theader;Headline,\n\tsubheader;Subheadline,\n\t--div--;LLL:EXT:cms/locallang_ttc.xlf:tabs.access,\n\t--palette--;LLL:EXT:cms/locallang_ttc.xlf:palette.visibility;visibility,\n\t--palette--;LLL:EXT:cms/locallang_ttc.xlf:palette.access;access,\n\t--div--;LLL:EXT:cms/locallang_ttc.xlf:tabs.extended'\n\t\t)\n\t),\n\t'columns' => array(\n\t\t'CType' => array(\n\t\t\t'config' => array(\n\t\t\t\t'items' => array(\n\t\t\t\t\t'video_content' => array(\n\t\t\t\t\t\t'Video Element', // Name des Inhaltselementes\n\t\t\t\t\t\t'video_content', // TCA Name des Inhaltselementes\n\t\t\t\t\t\t'EXT:eigene_inhaltselemente/Resources/Public/Images/Backend/ContentElements/VideoContent.png' // Bild des Inhaltelementes\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n);\n\n$GLOBALS['TCA']['tt_content'] = array_replace_recursive($GLOBALS['TCA']['tt_content'], $tca);\n```\n\nSeit der TYPO3CMS Version 6.2 werden Erweiterungen im TCA im Verzeichnis Configuration/TCA/Overrides abgelegt. Infos dazu findet ihr in diesem Slide http://de.slideshare.net/pk77/2015-04-tca-anderungen\n\n## TypoScript »meine_extension/ Configuration/ TypoScript/ setup.txt«\nSo ab jetzt ist unser Inhaltselement im TYPO3 CMS verfügbar. Damit wir aber auch eine passende Ausgabe im Frontend bekommen müssen wir noch ein par Einstellungen im TypoScript vornehmen. Diese dienen allein dafür, dass unser Inhaltselement gerendert wird. Praktischerweise bringt TYPO3 schon die notwendigen Funktionen mit so das wir uns hier aus 2 Quellen bedienen können. Einmal das CSS_STYLED_CONTENT und als zweites FLUID.\n\nMit folgendem TypoScript legen wir das Rendering für das Inhaltselement fest. Wir benutzen dafür ein FLUID Template. Dieses ist sehr einfach zu konfigurieren und falls wir noch zusätzliche »ViewHelper« benötigen haben wir vollen zugriff auf die TYPO3 Funktionen.\n\nDa wir das FAL benutzen um unser Vorschaubild zu Rendern packen wir das ganze in eine Fluid Variable um darauf ohne Probleme zugreifen zu können. Wir bedienen uns hier der Standardfunktion aus dem CSS_STYLED_CONTENT\n\n```\ntt_content.video_content = FLUIDTEMPLATE\ntt_content.video_content {\n\tfile = EXT:eigene_inhaltselemente/Resources/Private/Templates/VideoContent.html\n\tvariables {\n\t\tpreviewImage = FILES\n\t\tpreviewImage {\n\t\t\treferences {\n\t\t\t\ttable = tt_content\n\t\t\t\tfieldName = image\n\t\t\t}\n\t\t\trenderObj = IMAGE\n\t\t\trenderObj {\n\t\t\t\tfile.import.data = file:current:uid\n\t\t\t\tfile.treatIdAsReference = 1\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## FLUID Template\n\nAls letztes kommt das FLUID Template dran. Hier können wir auf die Felder mittels {data} zugreifen. In dieser Variable finden wir alle von TYPO3 gerenderten Felder.\n\nIm FLUID Wiki von finden wir die Komplette Referenzen Hier kann man sich einfach spielen und das Inhaltselement nach Belieben anpassen.\n\n```html\n<div class=\"video-content\">\n    <div class=\"video-content__video\">\n        <a href=\"{data.bodytext}\">{previewImage -> f:format.raw()}</a>\n    </div>\n    <div class=\"video-content__content\">\n        <h3>{data.header}</h3>\n        <h4>{data.subheader}</h4>\n    </div>\n</div>\n```\n\n## Nachwort\nSo ab nun kann man ganz einfach weitere Inhaltselemente hinzufügen und so hinbiegen wie man sie gerne hätte. Wenn jemand Fragen oder Anregungen hat einfach an info@creativeworkspace.de schreiben. Ich bin auch jederzeit via Twitter erreichbar mit @beardcoder.\n\nViel Spaß beim Ausprobieren und herumexperimentieren.\n\nWer sich die Komplette Extension ansehen oder herunterladen möchte findet sie bei mir auf Github unter <a href=\"https://github.com/beardcoder/eigene_inhaltselemente\" target=\"_blank\">https://github.com/beardcoder/eigene_inhaltselemente</a>\n\nVielen dank an:\n\nhttp://typo3.org/ für die Bereitstellung des Wikis\n"
}